reviewRules:
  enable: true
  outputSetting:
    # 评审后输出语言 zh-CN / en-US
    language: zh-CN
    # 问题等级设置为 BLOCKER/CRITICAL/MAJOR/MINOR
    problemLevel: BLOCKER
    # 内容过滤配置

  contentFilter:
    fileGlobs:
    - "**/pojo/**"
    - "**/dto/**"
    - "**/vo/**"

  pathInstructions:
    - pathSelectors:
      - "**/*.java"
      text: |
        - 1."首先确认代码是否实现了技术方案中的所有要求，检查是否有功能点遗漏。"
        - 2."遵循最小修改原则，确保只改动和生成需求相关的代码。"
        - 3."验证是否正确使用了项目中已有的工具方法、错误码和依赖项。"
        - 4."评估修改的侵入性，确认是否采用了最小侵入性的方案。"
        - 5."检查模块间依赖关系是否合理，是否存在循环依赖。"
        - 6."检查方法提前 return 是否合理，避免不必要的嵌套。"
        - 7."检查是否调用了废弃的方法，应使用推荐的替代方法。"
        - 8."检查异常处理是否合理，异常信息是否包含足够的上下文。"
        - 9."检查对可预期异常的处理方式是否合适。"
        - 10."验证是否使用`Optional`处理可能为空的返回值。"
        - 11."检查缓存键设计是否合理。"
        - 12."确认是否设置了适当的缓存过期时间。"
        - 13."验证是否考虑了缓存击穿、缓存雪崩等问题。"
        - 14."检查是否存在低效算法或数据结构（如大数据量下使用嵌套循环）。"
        - 15."确认是否存在重复计算情况（如在循环中执行相同的昂贵操作）。"
        - 16."验证资源使用是否合理（数据库连接、线程等）。"
        - 17."检查是否正确使用缓存提高性能。"
        - 18."确认是否存在潜在的内存泄漏问题。"
        - 19."确认是否对重要功能进行了单元测试验证。"
        - 20."检查测试用例是否全面（正常路径、异常路径、边界条件）。"
        - 21."确认是否使用Mock框架模拟外部依赖。"
        - 22."验证测试是否遵循Arrange-Act-Assert模式。"
        - 23."检查代码逻辑是否存在空指针风险。"
    - path: "**/*.xml"
      text: "1. 根据mybatis和mysql的用法检查sql中是否存在错误，例如类型错误、参数异常问题、表名异常问题、缺少</select>等闭合标签的问题"